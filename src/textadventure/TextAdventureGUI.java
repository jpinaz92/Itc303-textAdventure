/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package textadventure;

import java.awt.Event;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.SwingUtilities;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;

/**
 *
 * @author ALESON
 */
public class TextAdventureGUI extends javax.swing.JFrame {
    String gameMode = "story"; 
    Scene currenBatleScene;
    DefaultListModel model, playermodel, systemmodel, optionsmodel;
    DefaultListModel listmodel;
    Character player, system;
    private Map<String, Scene> scenesMap = new HashMap<String, Scene>(); 
    String weapon = "default";
    int weaponHealth = 100;
    String sweapon = "default";
    int shealth = 100;
    String current = "";
    int magicEffect = 0;

    /**
     * Creates new form TextAdventureGUI
     */
    public TextAdventureGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        optionslabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        optionslist = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        overviewlist = new javax.swing.JList();
        confirmbutton = new javax.swing.JButton();
        load = new javax.swing.JButton();
        save = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        playerlist = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        enemylist = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        list = new javax.swing.JList();
        label = new javax.swing.JLabel();
        usemagiclabel = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        usemagiclist = new javax.swing.JList();
        use = new javax.swing.JButton();
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 500));
        list.setVisible(false);
        usemagiclist.setVisible(false);
      //  playerlist.setVisible(false);
        use.setVisible(false);
        //enemylist.setVisible(false);
        label.setVisible(false);     

        model = new DefaultListModel();
        playermodel = new DefaultListModel();
        systemmodel = new DefaultListModel();
        optionsmodel = new DefaultListModel();
        listmodel = new DefaultListModel();
        overviewlist.setModel(model);
        optionslist.setModel(optionsmodel);
        

        jLabel1.setText("Player Progress");

        jLabel2.setText("Enemy Progress");

        jLabel3.setText("Overview");

        optionslabel.setText("Player Options");

        jScrollPane1.setViewportView(optionslist);

        jScrollPane2.setViewportView(overviewlist);

        confirmbutton.setText("Confirm");
       
   	 confirmbutton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
             confirmbuttonActionPerformed(evt);
        }
      });
       
        load.setText("Load");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(playerlist);

        jScrollPane4.setViewportView(enemylist);

        jScrollPane5.setViewportView(list);

        label.setText("Use Item");

        usemagiclabel.setText("UseMagic");

        jScrollPane6.setViewportView(usemagiclist);

        use.setText("Use");
        use.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(confirmbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(optionslabel))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usemagiclabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(use)))
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(load)
                .addGap(95, 95, 95)
                .addComponent(save))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(339, 339, 339)
                        .addComponent(confirmbutton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(optionslabel))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usemagiclabel)
                            .addComponent(label))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addComponent(use)))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(load)
                    .addComponent(save)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void confirmbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmbuttonActionPerformed
        if(gameMode.equals("fight") ){
        int option = optionslist.getSelectedIndex();
        if (option == 0) {
            System.out.println("Attack");
            model.addElement("Player Chooses to attack");
            Random n = new Random();
            int attack = n.nextInt(20);
            int intelligence = player.getIntl();
            int enemyDex = system.getDex();
            if ((attack + intelligence) > enemyDex) {
                model.addElement("Attack done successfully");
                model.addElement("Player has made a damage to Enemy");
                attack(weapon);
            }

            if (system.getCon() > 0) {
                SystemTurn();
            } else {
                model.addElement("Player Wins");
                 
                playermodel.clear();
                systemmodel.clear();
                gameMode = "story";
                initScene(scenesMap.get(currenBatleScene.getVictory()));
                
            }
        } else if (option == 1) {
            System.out.println("Use Magic");
            model.addElement("Player Chooses to Use Magic");

            useMagic();
        } else if (option == 2) {
            System.out.println("Use Item");
            model.addElement("Player Chooses to Use Item");

            useItem();
        } else if (option == 3) {
            System.out.println("Flee");
            model.addElement("Player Chooses to Flee");

            Flee();
            System.out.println("Back in confirmbuttonActionPerformed");
        }
}else
{
    Choice choice = (Choice) optionslist.getSelectedValue();
    currenBatleScene = scenesMap.get(choice.getOutSceneId());
    if (currenBatleScene != null) {
        initScene(currenBatleScene);}}
    }//GEN-LAST:event_confirmbuttonActionPerformed

    
    void attack(String weapon) {

        if (weapon.equals("default")) {
            player.setStr(player.getStr() + 5);
            player.setDex(player.getDex() + 5);
            player.setIntl(player.getIntl() + 5);
            player.setFth(player.getFth() + 5);
            player.setStr(player.getStr() - 4);
            
            weaponHealth -=10;
            
            system.setDex(system.getDex() - 4);
            system.setCon(system.getCon() - 20);
        } else if (weapon.contains("Magic")) {
            system.setCon(system.getCon() - magicEffect);
        } 
        setModels();

    }

    void useMagic() {
        listmodel.removeAllElements();
        current = "Item";
        use.setVisible(true);
        label.setVisible(false);
        list.setVisible(true);
        usemagiclabel.setVisible(true);
        current = "Magic";

        System.out.println(current);

        for (String s : player.magic.keySet()) {
            System.out.println(s);
            listmodel.addElement(s);
        }

    }

    void useItem() {
        listmodel.removeAllElements();
        current = "Item";
        use.setVisible(true);
        label.setVisible(true);
        list.setVisible(true);
        usemagiclabel.setVisible(false);

        for (String s : player.items.keySet()) {
            listmodel.addElement(s);
        }
    }

    void Flee() {
        FleeForm f = new FleeForm(this);
        f.setVisible(true);
        System.out.println("Just set Flee form visible");
    }
    
    void returnFromFlee() {
        gameMode = "story";
        initScene(scenesMap.get(currenBatleScene.getRunDefeat()));
    }
    
    public void initScene(Scene scene) {
      if (scene == null)System.out.println(currenBatleScene.getVictory());
      if (scene == null)System.out.println(scenesMap.get(currenBatleScene.getVictory()));
        if( scene.getType() != null && scene.getType().equals("combat")){
        	  model.addElement(scene.getDescription());  
        	  gameMode="fight";  
        	  optionsmodel.clear();
        	  //System.out.println(scene);
        	  currenBatleScene = scene;      	 
    	       formWindowOpened(scene);
        	  } else{
        		  model.addElement(scene.getDescription());
                   // txtpn.setCaretPosition(0);  
                  optionsmodel.clear();
                  for (Choice choice : scene.getChoices()) 
                 	optionsmodel.addElement(choice);
       
        	  }
    }
    
    
    
    private Scene buildScene(Element sceneElement) {
        Scene scene = null;
        String id = sceneElement.getAttributeValue("id");
        String type = sceneElement.getAttributeValue("type");
        if (id != null &&(  type == null||(type != null &&!type.equals("combat")))) {
            String sceneDescription = sceneElement.getChild("SceneDescription").getText();
            scene = new Scene(id, sceneDescription, type);                     
            List<Element> sceneChildren = sceneElement.getChildren();
            for (Element element : sceneChildren) {
                if (element.getName().equals("choice")) {
                    scene.getChoices().add(this.buildChoice(element));
                }
            }
        }
         else  {
        	   String sceneDescription = sceneElement.getChild("SceneDescription").getText();
               scene = new Scene(id, sceneDescription, type);           
               String sceneVictory = sceneElement.getChild("Victory").getText().trim();
               String sceneRunVictory = sceneElement.getChild("RunVictory").getText().trim();
               String sceneDefeat = sceneElement.getChild("Defeat").getText().trim();
               String sceneRunDefeat = sceneElement.getChild("RunDefeat").getText().trim();
             
               scene.setVictory(sceneVictory);
               scene.setRunVictory(sceneRunVictory);
               scene.setDefeat(sceneDefeat);
               scene.setRunDefeat(sceneRunDefeat);
           
             List<Element> sceneChildren = sceneElement.getChildren();
             for (Element element : sceneChildren) {
                 if (element.getName().equals("Enemy")) {
                     scene.getCharacters().add(this.buildCharacter(element));
                 }
             }
        }
      
        return scene;
    }
    
    
    private Choice buildChoice(Element choiceElement) {
        Choice choice = null;
        String id = choiceElement.getAttributeValue("no");
        if (null != id) {
            choice = new Choice();
            choice.setId(id);
            choice.setDescription(choiceElement.getChildText("choiceDescription"));
            choice.setOutSceneId(choiceElement.getChildText("outcome"));
        }
        return choice;
    }
    
    private Character buildCharacter(Element charElement) {
    	Character npc = null;
    	String id = charElement.getAttributeValue("id"); 
    	if (id != null)
    	{
    		npc = new Character();
    		npc.setId(Integer.parseInt(id));
    		List<Element> propList = charElement.getChildren();
    		for(Element el : propList  ){
    			if(el.getName().equals("con"))
    				npc.setCon(Integer.parseInt(el.getText()));
    			if(el.getName().equals("str"))
    				npc.setStr(Integer.parseInt(el.getText()));
    			if(el.getName().equals("intl"))
    				npc.setIntl(Integer.parseInt(el.getText()));
    			if(el.getName().equals("fth"))
    				npc.setFth(Integer.parseInt(el.getText()));
    			if(el.getName().equals("chr"))
    				npc.setChr(Integer.parseInt(el.getText()));
    			if(el.getName().equals("dex"))
    				npc.setDex(Integer.parseInt(el.getText()));
    			if(el.getName().equals("magic")) 
    				npc.magic.put(el.getText(), Integer.parseInt(el.getAttributeValue("Dmg")));
    			
    		}
    		

    	}
    	return npc;
    }
    
    
    
    

    private void formWindowOpened(Scene scene) {//GEN-FIRST:event_formWindowOpened
    
       usemagiclabel.setVisible(false);
       label.setVisible(false);
       list.setVisible(false);
        usemagiclist.setVisible(true);
        //use.setVisible(false);
        
        player =new Character();
        system = scene.getCharacters().get(0);;

        optionslabel.setVisible(false);
        optionslist.setVisible(false);
        confirmbutton.setVisible(false);

     
        playermodel = new DefaultListModel();
        systemmodel = new DefaultListModel();
     
        listmodel = new DefaultListModel();

        playerlist.setModel(playermodel);
        enemylist.setModel(systemmodel);
        overviewlist.setModel(model);
        optionslist.setModel(optionsmodel);
        list.setModel(listmodel);

        optionsmodel.addElement("Attack");
        optionsmodel.addElement("Use Magic");
        optionsmodel.addElement("Use Item");
        optionsmodel.addElement("Flee");

        setInitials(player,system);

        int pseed = player.roll(100) + player.getDex();
        int sseed = system.roll(100) + system.getDex();
        System.out.println(pseed);
        model.addElement("Players Rolling");
        int p = 0;
        try {

            pause();

            model.addElement("Players number is " + String.valueOf(pseed));

            model.addElement("System Rolling");

            model.addElement("System number is " + String.valueOf(sseed));

            if (pseed > sseed) {
                model.addElement("Players turn first");
                p++;
            } else {
                model.addElement("System turn first");
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(TextAdventureGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (p == 1) {
            optionslabel.setVisible(true);
            optionslist.setVisible(true);
            confirmbutton.setVisible(true);
        } else {
            SystemTurn();
        }


    }//GEN-LAST:event_formWindowOpened

    void SystemTurn() {
        optionslabel.setVisible(true);
        optionslist.setVisible(true);
        confirmbutton.setVisible(true);
        if (system.getCon() > 0) {
            int r = system.roll(100);
            double flee = player.getChr() / (system.getCon() * 2);
            if (r < flee) {
                model.addElement("Enemy is Desperate");
                int c = system.roll(3);
                if (c == 1) {
                model.addElement("Enemy Flees");
                gameMode = "story";
                playermodel.clear();
                systemmodel.clear();
                initScene(scenesMap.get(currenBatleScene.getRunVictory()));
                    //System.exit(1);
                } else if (c == 2) {
                    int temp = 0;
                    String magic = "";
                    int magicPower = 0;
                    for (String s : system.magic.keySet()) {
                        temp += system.magic.get(s);
                        magic = s;
                        magicPower = system.magic.get(s);
                    }
                    if (r < temp) {
                        model.addElement("System used Spell " + magic);
                        system.setCon(system.getCon() - magicPower);
                    }
                } else {
                    String w = "";
                    int wh = 0;
                    for (String s : system.items.keySet()) {
                        w = s;
                        wh = system.items.get(s);
                    }
                    model.addElement("System switching weapon " + w);
                    system.items.put(sweapon, shealth);
                    sweapon = w;
                    shealth = system.items.get(w);
                    system.items.remove(w);
                }
            } else {
                model.addElement("Enemy Attacks");
                system.setStr(system.getStr() + 5);
                system.setDex(system.getDex() + 5);
                system.setIntl(system.getIntl() + 5);
                system.setFth(system.getFth() + 5);
                system.setStr(system.getStr() - 4);
                shealth -= 10;
                
                player.setDex(player.getDex() - 4);
                player.setCon(player.getCon() - 20);

                model.addElement("Enemy has made a damage to Player");
                setModels();
            }

            if (player.getCon() <= 0) {
                model.addElement("Enemy Wins.");
                
                optionslabel.setVisible(false);
                optionslist.setVisible(false);
                confirmbutton.setVisible(false);
                gameMode = "story";
                playermodel.clear();
                systemmodel.clear();
                initScene(scenesMap.get(currenBatleScene.getDefeat()));
            }
        } else {
            model.addElement("Player Wins.");
            gameMode = "story";
            playermodel.clear();
            systemmodel.clear();
            initScene(scenesMap.get(currenBatleScene.getVictory()));
        }
    }

    private void useActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useActionPerformed

        if (current.equals("Magic")) {
            int index = list.getSelectedIndex();
            String magic = listmodel.get(index).toString();
            model.addElement("Player used magic " + magic);
            magicEffect = player.magic.get(magic);
            player.magic.remove(magic);
            usemagiclabel.setVisible(false);
            attack("Magic=" + magic);
            SystemTurn();
        } else {
            int index = list.getSelectedIndex();
            String item = listmodel.get(index).toString();
            model.addElement("Player Switched weapon to " + item);

            player.items.put(weapon, weaponHealth);
            weapon = item;
            weaponHealth = player.items.get(item);
            player.items.remove(item);
            label.setVisible(false);
        }

        list.setVisible(false);
        use.setVisible(false);
        
    }//GEN-LAST:event_useActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed

        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter("Playerfile.txt"));
            
            if (gameMode == "story")
            {
                
                bw.write(String.valueOf(currenBatleScene.getId()));
            } else if (gameMode == "fight")
                {
                bw.write(String.valueOf(currenBatleScene.getId()));
                bw.newLine();
                bw.write(weapon);
                bw.newLine();
                bw.write(String.valueOf(weaponHealth));
                bw.newLine();
                bw.write(String.valueOf(player.getChr()));
                bw.newLine();
                bw.write(String.valueOf(player.getCon()));
                bw.newLine();
                bw.write(String.valueOf(player.getDex()));
                bw.newLine();
                bw.write(String.valueOf(player.getFth()));
                bw.newLine();
                bw.write(String.valueOf(player.getId()));
                bw.newLine();
                bw.write(String.valueOf(player.getIntl()));
                bw.newLine();
                bw.write(String.valueOf(player.getStr()));
                bw.newLine();
                bw.write("Items");
                for(String s:player.items.keySet())
                {
                     bw.write(","+s+" "+ player.items.get(s));
                }
            
                bw.newLine();
                bw.write("Magic");
                for(String s:player.magic.keySet())
                {
                    bw.write(","+s+" "+ player.magic.get(s));
                }
            
                bw.close();
            
            
                bw = new BufferedWriter(new FileWriter("Systemfile.txt"));
            
     
                bw.write(sweapon);
                bw.newLine();
                bw.write(String.valueOf(shealth));
                bw.newLine();
                bw.write(String.valueOf(system.getChr()));
                bw.newLine();
                bw.write(String.valueOf(system.getCon()));
                bw.newLine();
                bw.write(String.valueOf(system.getDex()));
                bw.newLine();
                bw.write(String.valueOf(system.getFth()));
                bw.newLine();
                bw.write(String.valueOf(system.getId()));
                bw.newLine();
                bw.write(String.valueOf(system.getIntl()));
                bw.newLine();
                bw.write(String.valueOf(system.getStr()));
            
                for(String s:system.items.keySet())
                {
                    bw.newLine();
                    bw.write(s+" "+ system.items.get(s));
                }
            
                for(String s:system.magic.keySet())
                {
                    bw.newLine();
                    bw.write(s+" "+ system.magic.get(s));
                }
                bw.close();
            }
        } catch (IOException ex) {
            Logger.getLogger(TextAdventureGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_saveActionPerformed

    void removeAllpreviousElements()
    {
        player.clearMaps();
        system.clearMaps();
    }
    
    
    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed

//        removeAllpreviousElements();
        try {
            BufferedReader br = new BufferedReader(new FileReader("Playerfile.txt"));
            
            if (gameMode == "story")
            {
                currenBatleScene.setId(br.readLine());
                initScene(currenBatleScene);
            }
            else if (gameMode == "fight") {
                currenBatleScene.setId(br.readLine());
                initScene(currenBatleScene);
                weapon = br.readLine();
                weaponHealth = Integer.parseInt(br.readLine());
                player.setChr(Integer.parseInt(br.readLine()));
                player.setCon(Integer.parseInt(br.readLine()));
                player.setDex(Integer.parseInt(br.readLine()));
                player.setFth(Integer.parseInt(br.readLine()));
                player.setId(Integer.parseInt(br.readLine()));
                player.setIntl(Integer.parseInt(br.readLine()));
                player.setStr(Integer.parseInt(br.readLine()));
        
                String item = br.readLine();
                String magic = br.readLine();
            
                String[] items = item.split(",");
                String[] magics = magic.split(",");
            
            
                for(int i=1; i<items.length; i++)
                {
                    String[] values = items[i].split(" ");
                    player.items.put(values[0], Integer.parseInt(values[1]));
                }
            
                for(int i=1; i<magics.length; i++)
                {
                    String[] values = magics[i].split(" ");
                    player.magic.put(values[0], Integer.parseInt(values[1]));
                }
                br.close();
            
                br = new BufferedReader(new FileReader("Systemfile.txt"));
            
                sweapon = br.readLine();
                shealth = Integer.parseInt(br.readLine());
                system.setChr(Integer.parseInt(br.readLine()));
                system.setCon(Integer.parseInt(br.readLine()));
                system.setDex(Integer.parseInt(br.readLine()));
                system.setFth(Integer.parseInt(br.readLine()));
                system.setId(Integer.parseInt(br.readLine()));
                system.setIntl(Integer.parseInt(br.readLine()));
                system.setStr(Integer.parseInt(br.readLine()));
        
                item = br.readLine();
                magic = br.readLine();
            
                String[] items1 = item.split(",");
                String[] magics1 = magic.split(",");
            
            
                for(int i=1; i<items1.length; i++)
                {
                    String[] values = items1[i].split(" ");
                    system.items.put(values[0], Integer.parseInt(values[0]));
                }
            
                for(int i=1; i<magics1.length; i++)
                {
                    String[] values = magics1[i].split(" ");
                    system.magic.put(values[0], Integer.parseInt(values[0]));
                }
                br.close();
            }
            
            setModels();
        
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(TextAdventureGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TextAdventureGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_loadActionPerformed
   
    //Scenes
   
    
    
    public Map<String, Scene> getScenesMap() {
        return scenesMap;
    }
    
    
    
    
    
    private void pause() throws InterruptedException {
        TimeUnit.SECONDS.sleep(1);
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {

            }
        });
    }

    void setInitials(Character you,Character enemy) {
        player.setId(1);
        player.setCon(100);
        player.setChr(50);
        player.setStr(20);
        player.setDex(50);
        player.setIntl(50);
        player.setFth(50);
        player.items.put("Sword", 100);
        player.items.put("Mace", 150);
        player.magic.put("FireBall", 45);
        player.magic.put("lightningBolt", 40);
        
        system = enemy;       
      
        
        system.items.put("Axe", 100);
        system.items.put("Hammer", 150);
       

        setModels();
    }

    void setModels() {

        playermodel.removeAllElements();
        systemmodel.removeAllElements();

        playermodel.addElement("Weapon : " + weapon + ": " + weaponHealth);
        playermodel.addElement("Id : " + player.getId());
        //playermodel.addElement("HP : " + player.getHP());
        playermodel.addElement("Con : " + player.getCon());
        playermodel.addElement("Chr : " + player.getChr());
        playermodel.addElement("Str : " + player.getStr());
        playermodel.addElement("Dex : " + player.getDex());
        playermodel.addElement("Intl : " + player.getIntl());
        playermodel.addElement("Fth : " + player.getFth());

        systemmodel.addElement("Weapon : " + sweapon + ": " + shealth);
        systemmodel.addElement("Id : " + system.getId());
        //systemmodel.addElement("HP : " + system.getHP());
        systemmodel.addElement("Con : " + system.getCon());
        systemmodel.addElement("Chr : " + system.getChr());
        systemmodel.addElement("Str : " + system.getStr());
        systemmodel.addElement("Dex : " + system.getDex());
        systemmodel.addElement("Intl : " + system.getIntl());
        systemmodel.addElement("Fth : " + system.getFth());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextAdventureGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextAdventureGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextAdventureGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextAdventureGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run()   {
            	 TextAdventureGUI storyBoard = new TextAdventureGUI();
            	try{
            	  File inputFile = new File("1 Holding the Ice Fortress.txt");
               	  SAXBuilder saxB = new SAXBuilder();
                  Document doc;
				  doc = saxB.build(inputFile);					                
                  Element storyElement = doc.getRootElement();
                  Scene firstScene = null;
                  
                  List<Element> scenesList = storyElement.getChildren();
                  for (Element sceneElement : scenesList) {
                      Scene scene = storyBoard.buildScene(sceneElement);
                      storyBoard.getScenesMap().put(scene.getId(), scene);
                      //storyBoard.buildCharacter(sceneElement);
                      if (firstScene == null) {
                          firstScene = scene;
                      }
                     // if (scene.getType() == "combat") {
                      	
                      //}
                  }
                
                  storyBoard.initScene(firstScene);
               
                  storyBoard.setVisible(true);
                  //save.writeObject(firstScene);
                  //save.flush();
            	}
            	catch (Exception e) {
                    e.printStackTrace();
                }
            	 System.out.println(storyBoard.scenesMap);
            	 storyBoard.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton confirmbutton;
    private javax.swing.JList enemylist;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel label;
    private javax.swing.JList list;
    private javax.swing.JButton load;
    private javax.swing.JLabel optionslabel;
    private javax.swing.JList optionslist;
    private javax.swing.JList overviewlist;
    private javax.swing.JList playerlist;
    private javax.swing.JButton save;
    private javax.swing.JButton use;
    private javax.swing.JLabel usemagiclabel;
    private javax.swing.JList usemagiclist;
    // End of variables declaration//GEN-END:variables
}